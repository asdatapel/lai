

 - more comparison operators (>, <, >=, <=, !=) -- DONE
 - pointers -- DONE
 - arrays -- DONE
 
 - strings
 - operator precedence
 - better type system for primitives
    - complete this before moving on to structs
 - constants
 - control flow
    - else / else if
    - condition formatting (parenthesis?)
    - basic 'for' and 'while' loops
 - fix type inference (especially for recursive functions)
 - errors and messaging
 - importing files
 - external libs support (should be easy? just allow for external vars and functions)
 - designated main function
 - unicode
 - 'if' as an expressions
 - polymorphism
 - proper initialization (with optional non init)
 - closures and currying
 - multiple declarations together (a, b, c := 3;)
 - variadic function args                                                                                                                                                                                                                                                                                                                                                                                                                            

Stretch goals:
 - out of order references (i.e declaration shouldn't have to come before use, at least at global scope)
 - runtime type info
 - struct with templating
 - debug symbols
 - better memory management
 - compiler profiling
 - higher quality code generation
 - implicit args (idea: only grab single implicit arg if it matches implicit arg of calling function)
 - Any type
 - for loops should also be a variable. the variable is used for flow control 
      example :
      f := for element : array {
         if element == 1 continue f;
         if element == 2 remove f;
      }
